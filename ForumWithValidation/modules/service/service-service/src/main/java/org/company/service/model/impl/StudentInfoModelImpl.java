/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.company.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.company.service.model.StudentInfo;
import org.company.service.model.StudentInfoModel;

/**
 * The base model implementation for the StudentInfo service. Represents a row in the &quot;asif_StudentInfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StudentInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StudentInfoImpl
 * @generated
 */
public class StudentInfoModelImpl
	extends BaseModelImpl<StudentInfo> implements StudentInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a student info model instance should use the <code>StudentInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "asif_StudentInfo";

	public static final Object[][] TABLE_COLUMNS = {
		{"studentId", Types.BIGINT}, {"firstname", Types.VARCHAR},
		{"lastname", Types.VARCHAR}, {"gender", Types.VARCHAR},
		{"dateofbirth", Types.VARCHAR}, {"course", Types.VARCHAR},
		{"intake", Types.VARCHAR}, {"address", Types.VARCHAR},
		{"city", Types.VARCHAR}, {"postcode", Types.VARCHAR},
		{"country", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"mobile", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("studentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("firstname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateofbirth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("course", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("intake", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postcode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("country", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobile", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table asif_StudentInfo (studentId LONG not null primary key,firstname VARCHAR(75) null,lastname VARCHAR(75) null,gender VARCHAR(75) null,dateofbirth VARCHAR(75) null,course VARCHAR(75) null,intake VARCHAR(75) null,address VARCHAR(75) null,city VARCHAR(75) null,postcode VARCHAR(75) null,country VARCHAR(75) null,email VARCHAR(75) null,mobile VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table asif_StudentInfo";

	public static final String ORDER_BY_JPQL =
		" ORDER BY studentInfo.studentId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY asif_StudentInfo.studentId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public StudentInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _studentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStudentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _studentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StudentInfo.class;
	}

	@Override
	public String getModelClassName() {
		return StudentInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<StudentInfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<StudentInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StudentInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((StudentInfo)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<StudentInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<StudentInfo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(StudentInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<StudentInfo, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<StudentInfo, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, StudentInfo>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			StudentInfo.class.getClassLoader(), StudentInfo.class,
			ModelWrapper.class);

		try {
			Constructor<StudentInfo> constructor =
				(Constructor<StudentInfo>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<StudentInfo, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<StudentInfo, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<StudentInfo, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<StudentInfo, Object>>();
		Map<String, BiConsumer<StudentInfo, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<StudentInfo, ?>>();

		attributeGetterFunctions.put("studentId", StudentInfo::getStudentId);
		attributeSetterBiConsumers.put(
			"studentId",
			(BiConsumer<StudentInfo, Long>)StudentInfo::setStudentId);
		attributeGetterFunctions.put("firstname", StudentInfo::getFirstname);
		attributeSetterBiConsumers.put(
			"firstname",
			(BiConsumer<StudentInfo, String>)StudentInfo::setFirstname);
		attributeGetterFunctions.put("lastname", StudentInfo::getLastname);
		attributeSetterBiConsumers.put(
			"lastname",
			(BiConsumer<StudentInfo, String>)StudentInfo::setLastname);
		attributeGetterFunctions.put("gender", StudentInfo::getGender);
		attributeSetterBiConsumers.put(
			"gender", (BiConsumer<StudentInfo, String>)StudentInfo::setGender);
		attributeGetterFunctions.put(
			"dateofbirth", StudentInfo::getDateofbirth);
		attributeSetterBiConsumers.put(
			"dateofbirth",
			(BiConsumer<StudentInfo, String>)StudentInfo::setDateofbirth);
		attributeGetterFunctions.put("course", StudentInfo::getCourse);
		attributeSetterBiConsumers.put(
			"course", (BiConsumer<StudentInfo, String>)StudentInfo::setCourse);
		attributeGetterFunctions.put("intake", StudentInfo::getIntake);
		attributeSetterBiConsumers.put(
			"intake", (BiConsumer<StudentInfo, String>)StudentInfo::setIntake);
		attributeGetterFunctions.put("address", StudentInfo::getAddress);
		attributeSetterBiConsumers.put(
			"address",
			(BiConsumer<StudentInfo, String>)StudentInfo::setAddress);
		attributeGetterFunctions.put("city", StudentInfo::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<StudentInfo, String>)StudentInfo::setCity);
		attributeGetterFunctions.put("postcode", StudentInfo::getPostcode);
		attributeSetterBiConsumers.put(
			"postcode",
			(BiConsumer<StudentInfo, String>)StudentInfo::setPostcode);
		attributeGetterFunctions.put("country", StudentInfo::getCountry);
		attributeSetterBiConsumers.put(
			"country",
			(BiConsumer<StudentInfo, String>)StudentInfo::setCountry);
		attributeGetterFunctions.put("email", StudentInfo::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<StudentInfo, String>)StudentInfo::setEmail);
		attributeGetterFunctions.put("mobile", StudentInfo::getMobile);
		attributeSetterBiConsumers.put(
			"mobile", (BiConsumer<StudentInfo, String>)StudentInfo::setMobile);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getStudentId() {
		return _studentId;
	}

	@Override
	public void setStudentId(long studentId) {
		_studentId = studentId;
	}

	@Override
	public String getFirstname() {
		if (_firstname == null) {
			return "";
		}
		else {
			return _firstname;
		}
	}

	@Override
	public void setFirstname(String firstname) {
		_firstname = firstname;
	}

	@Override
	public String getLastname() {
		if (_lastname == null) {
			return "";
		}
		else {
			return _lastname;
		}
	}

	@Override
	public void setLastname(String lastname) {
		_lastname = lastname;
	}

	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		_gender = gender;
	}

	@Override
	public String getDateofbirth() {
		if (_dateofbirth == null) {
			return "";
		}
		else {
			return _dateofbirth;
		}
	}

	@Override
	public void setDateofbirth(String dateofbirth) {
		_dateofbirth = dateofbirth;
	}

	@Override
	public String getCourse() {
		if (_course == null) {
			return "";
		}
		else {
			return _course;
		}
	}

	@Override
	public void setCourse(String course) {
		_course = course;
	}

	@Override
	public String getIntake() {
		if (_intake == null) {
			return "";
		}
		else {
			return _intake;
		}
	}

	@Override
	public void setIntake(String intake) {
		_intake = intake;
	}

	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@Override
	public String getPostcode() {
		if (_postcode == null) {
			return "";
		}
		else {
			return _postcode;
		}
	}

	@Override
	public void setPostcode(String postcode) {
		_postcode = postcode;
	}

	@Override
	public String getCountry() {
		if (_country == null) {
			return "";
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		_country = country;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public String getMobile() {
		if (_mobile == null) {
			return "";
		}
		else {
			return _mobile;
		}
	}

	@Override
	public void setMobile(String mobile) {
		_mobile = mobile;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, StudentInfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StudentInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, StudentInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StudentInfoImpl studentInfoImpl = new StudentInfoImpl();

		studentInfoImpl.setStudentId(getStudentId());
		studentInfoImpl.setFirstname(getFirstname());
		studentInfoImpl.setLastname(getLastname());
		studentInfoImpl.setGender(getGender());
		studentInfoImpl.setDateofbirth(getDateofbirth());
		studentInfoImpl.setCourse(getCourse());
		studentInfoImpl.setIntake(getIntake());
		studentInfoImpl.setAddress(getAddress());
		studentInfoImpl.setCity(getCity());
		studentInfoImpl.setPostcode(getPostcode());
		studentInfoImpl.setCountry(getCountry());
		studentInfoImpl.setEmail(getEmail());
		studentInfoImpl.setMobile(getMobile());

		studentInfoImpl.resetOriginalValues();

		return studentInfoImpl;
	}

	@Override
	public int compareTo(StudentInfo studentInfo) {
		long primaryKey = studentInfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StudentInfo)) {
			return false;
		}

		StudentInfo studentInfo = (StudentInfo)obj;

		long primaryKey = studentInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<StudentInfo> toCacheModel() {
		StudentInfoCacheModel studentInfoCacheModel =
			new StudentInfoCacheModel();

		studentInfoCacheModel.studentId = getStudentId();

		studentInfoCacheModel.firstname = getFirstname();

		String firstname = studentInfoCacheModel.firstname;

		if ((firstname != null) && (firstname.length() == 0)) {
			studentInfoCacheModel.firstname = null;
		}

		studentInfoCacheModel.lastname = getLastname();

		String lastname = studentInfoCacheModel.lastname;

		if ((lastname != null) && (lastname.length() == 0)) {
			studentInfoCacheModel.lastname = null;
		}

		studentInfoCacheModel.gender = getGender();

		String gender = studentInfoCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			studentInfoCacheModel.gender = null;
		}

		studentInfoCacheModel.dateofbirth = getDateofbirth();

		String dateofbirth = studentInfoCacheModel.dateofbirth;

		if ((dateofbirth != null) && (dateofbirth.length() == 0)) {
			studentInfoCacheModel.dateofbirth = null;
		}

		studentInfoCacheModel.course = getCourse();

		String course = studentInfoCacheModel.course;

		if ((course != null) && (course.length() == 0)) {
			studentInfoCacheModel.course = null;
		}

		studentInfoCacheModel.intake = getIntake();

		String intake = studentInfoCacheModel.intake;

		if ((intake != null) && (intake.length() == 0)) {
			studentInfoCacheModel.intake = null;
		}

		studentInfoCacheModel.address = getAddress();

		String address = studentInfoCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			studentInfoCacheModel.address = null;
		}

		studentInfoCacheModel.city = getCity();

		String city = studentInfoCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			studentInfoCacheModel.city = null;
		}

		studentInfoCacheModel.postcode = getPostcode();

		String postcode = studentInfoCacheModel.postcode;

		if ((postcode != null) && (postcode.length() == 0)) {
			studentInfoCacheModel.postcode = null;
		}

		studentInfoCacheModel.country = getCountry();

		String country = studentInfoCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			studentInfoCacheModel.country = null;
		}

		studentInfoCacheModel.email = getEmail();

		String email = studentInfoCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			studentInfoCacheModel.email = null;
		}

		studentInfoCacheModel.mobile = getMobile();

		String mobile = studentInfoCacheModel.mobile;

		if ((mobile != null) && (mobile.length() == 0)) {
			studentInfoCacheModel.mobile = null;
		}

		return studentInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<StudentInfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<StudentInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StudentInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((StudentInfo)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<StudentInfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<StudentInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StudentInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((StudentInfo)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, StudentInfo>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _studentId;
	private String _firstname;
	private String _lastname;
	private String _gender;
	private String _dateofbirth;
	private String _course;
	private String _intake;
	private String _address;
	private String _city;
	private String _postcode;
	private String _country;
	private String _email;
	private String _mobile;
	private StudentInfo _escapedModel;

}